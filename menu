#!/bin/bash
source menu-txt
echo -ne "${cor[6]}"
read -p " ${txt[9]} " _selecao
case $_selecao in
0)
clear
echo -e "${cor[0]}"
exit
;;
1)
clear
source user
exit
;;
2)
clear
source ferramentas
exit
;;
3)
mt=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f2)
mf=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f4)
mb=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f6)
ml=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f7)
echo -e "M Usable:" $ml " ●   M Libre:" $mf "  ●   M Cache:" $mb
echo -e "OPTIMIZANDO SERVIDOR"
echo -e "$barra"
sleep 1
echo -e "$barra"
sleep 0.5
echo -e "${cor[1]} ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆ ${cor[0]}"
echo -e "${cor[4]} ${txt[115]}\n ${txt[116]}"
echo -e "${cor[1]} ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆ ${cor[0]}" 
echo 3 > /proc/sys/vm/drop_caches
sysctl -w vm.drop_caches=3 > /dev/null 2>&1
rm -rf /tmp/*
echo -e "${cor[5]} ${txt[117]}"
echo -e "${cor[1]} ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆ ${cor[0]}"
sleep 0.5
echo -e "$barra"
mt=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f2)
mf=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f4)
mb=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f6)
ml=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f7)
echo -e "M Usable:" $ml " ●   M Libre:" $mf "  ●   M Cache:" $mb
read -rsp $'Presiona una TECLA o Espere 5 segundos para continuar...\n' -n 1 -t 5;
clear
source menu
;;
4)
remover_adm
exit
;;
5)
funcao_cores
source menu
exit
;;
6)
funcao_verificacao > /dev/null 2>&1
source menu
exit
;;
7)
clear
    echo -e "${cor[1]} ➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶ ${cor[0]}"
    echo -e "${cor[2]} \033[1;32m          * ESTA OPCION ES EXPERIMENTAL *"
    echo -e "${cor[2]} \033[1;32mPara continuar debes tener configurado un dominio en el VPS"
    echo -e "${cor[2]} \033[1;35m***********************************************************"
    echo -e "Si Cumples con ese requisito dijita Y/y, Caso contrario N/n para salir";
	echo -ne "OPCION: ";read yn
    if [[ $yn = @(s|S|y|Y) ]];
	then
        echo -e "Dijitaste que Si, Vamos a Proseguir" 
        mkdir -p chumogh
        cd chumogh
		wget -q https://raw.githubusercontent.com/ChumoGH/chumogh-gmail.com/master/cgh-v2ray.sh
        chmod +x cgh-v2ray.sh
        ./cgh-v2ray.sh
        cd
        cd
        rm -rf chumogh
		exit
		else
        echo "NO CUMPLES REQUISITOS, Vamos a volver al menu"
		source menu
    fi
echo -e "${cor[1]} INSTALACION FINALIZADA!!!!! ${cor[0]}"
echo -e "${cor[1]} ➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷ ${cor[0]}"
read -rsp $'Presiona una TECLA o Espere 5 segundos para continuar...\n' -n 1 -t 5;
souce menu
;;
8)
if [[ -e /etc/bash.bashrc-bakup ]]; then
mv -f /etc/bash.bashrc-bakup /etc/bash.bashrc
cat /etc/bash.bashrc | grep -v "/bin/adm" > /tmp/bash
mv -f /tmp/bash /etc/bash.bashrc
echo -e "${cor[1]} ➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶ ${cor[0]}"
echo -e "${cor[2]} \033[1;32mAUTOEJECUCION DESACTIVADA"
echo -e "${cor[1]} ➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷ ${cor[0]}"
elif [[ -e /etc/bash.bashrc ]]; then
cat /etc/bash.bashrc|grep -v /bin/adm > /etc/bash.bashrc.2
echo '/bin/adm' >> /etc/bash.bashrc.2
cp /etc/bash.bashrc /etc/bash.bashrc-bakup
mv -f /etc/bash.bashrc.2 /etc/bash.bashrc
echo -e "${cor[1]} ➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶ ${cor[0]}"
echo -e "${cor[2]} \033[1;32mAUTOEJECUCION ACTIVADA"
echo -e "${cor[1]} ➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷ ${cor[0]}"
fi
sleep 2s
source menu
exit
;;
9)
$value > /dev/null 2>&1
chmod +x /etc/adm-lite/*
[[ -e /etc/adm-lite/idioma_menuinst ]] && idioma=$(cat /etc/adm-lite/idioma_menuinst|head -1) || idioma="pt"
value=$(vary_rex "2f6574632f61646d2d6c6974652f6d656e755f696e7374")
${value} ${idioma}
;;
99)
fun_atualizar
exit
;;
*)
source menu
;;
esac
